name: 🌀 Wormhole tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  # Use github.run_id on main branch (or any protected branch)
  # This ensures that no runs get cancelled on main.
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # and will cancel obsolete runs.
  # Use github.ref on other branches, so it's unique per branch.
  group: ${{ github.workflow }}-${{ github.ref_protected && github.run_id ||
    github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-image:
    name: "🐳️ Build images"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images and output the image name
        id: build
        shell: bash
        run: |
          # Ensure the script is executable
          chmod +x .github/build-docker-images.sh
          chmod +x .github/get-docker-tag.sh

          # Output the image name
          set pipefail
          .github/build-docker-images.sh | tee docker.log
          DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
          echo "DOCKER_CI_IMAGE $DOCKER_CI_IMAGE"
          echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"

  setup-and-test:
    name: "🦄 Run tests"
    runs-on: tt-beta-ubuntu-2204-n150-large-stable
    needs: build-image
    timeout-minutes: 60
    container:
      image: ${{ needs.build-image.outputs.docker-image }}
      options: "--device /dev/tenstorrent"

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history so 'origin/main' is available

      # Step 2: Run the tests
      - name: Run tests
        shell: bash
        run: |
          # Set up the environment
          export CHIP_ARCH=wormhole
          # Link sfpi to the tests directory
          ln -s /home/sfpi/sfpi tests/sfpi
          # Run the tests
          cd tests/python_tests/
          pytest --timeout=60 --color=yes --force-sugar .

      # Step 3: Upload test log as an artifact
      - name: Upload logs if tests fail
        if: failure()  # Only upload the log if the previous step failed
        uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: tests/python_tests/pytest_errors.log
