# SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC
# SPDX-License-Identifier: Apache-2.0


import pytest
import torch

from helpers.chip_architecture import ChipArchitecture, get_chip_architecture
from helpers.device import (
    collect_results,
    write_stimuli_to_l1,
)
from helpers.format_arg_mapping import (
    ApproximationMode,
    DestAccumulation,
    MathOperation,
    format_dict,
)
from helpers.format_config import DataFormat, InputOutputFormat
from helpers.golden_generators import UnarySFPUGolden, get_golden_generator
from helpers.param_config import (
    input_output_formats,
    parametrize,
)
from helpers.stimuli_generator import generate_stimuli
from helpers.test_config import run_test
from helpers.utils import passed_test


@parametrize(
    test_name="fast_exp_test",
    formats=input_output_formats(
        [
            DataFormat.Float16_b,
        ]
    ),
    approx_mode=[ApproximationMode.Yes],
    mathop=[MathOperation.Exp],
    dest_acc=[DestAccumulation.No],  # , DestAccumulation.Yes],
)
def test_eltwise_unary_sfpu_float(test_name, formats, approx_mode, mathop, dest_acc):
    arch = get_chip_architecture()

    if dest_acc == DestAccumulation.No and arch == ChipArchitecture.BLACKHOLE:
        if formats.input_format == DataFormat.Float16 or formats == InputOutputFormat(
            DataFormat.Float32, DataFormat.Float16
        ):
            pytest.skip(reason="This combination is not supported on BH architecture")

    if (
        approx_mode == ApproximationMode.Yes
        and mathop in [MathOperation.Exp, MathOperation.Exp2, MathOperation.Elu]
        and (
            formats.input_format == DataFormat.Bfp8_b
            or formats.output_format == DataFormat.Bfp8_b
        )
    ):
        pytest.skip(
            reason="Exp-related operations are not supported for bf8_b format in approximation mode."
        )

    eltwise_unary_sfpu(test_name, formats, dest_acc, approx_mode, mathop)


def eltwise_unary_sfpu(test_name, formats, dest_acc, approx_mode, mathop):
    torch.manual_seed(0)
    torch.set_printoptions(precision=10)
    input_dimensions = [32, 32]

    src_A, src_B, tile_cnt = generate_stimuli(
        formats.input_format, formats.input_format, input_dimensions=input_dimensions
    )

    # Metal SDPA test case

    # def fa_rand(*shape):
    #     normal_1 = torch.randn(shape) * 0.5
    #     normal_2 = torch.randn(shape) * 10
    #     bernoulli = torch.bernoulli(torch.full(shape, 0.001))
    #     return normal_1 + normal_2 * bernoulli

    # src_A = torch.tensor([
    #     -2.9844, -1.7422, -0.6562, -2.3906, -0.3125, -0.8828, -1.0156, -2.0312, -1.5859, -1.3594, -0.9531, -1.0703, -8.5000, -2.8906, -1.1328, -2.3906,
    #     -5.8750, -5.3125, -5.1250,  0.0000, -4.1875, -5.7812, -3.1250, -7.1562, -5.0312, -4.7500, -3.5781, -3.6562, -9.0000, -5.4062, -5.3438, -2.7344,
    #     -3.0625, -3.6562, -2.7969, -4.9062, -1.8906, -3.1250, -4.7500, -2.7188, -1.9375,  0.0000, -1.4375, -3.3750, -4.6250, -6.0938, -5.7500, -6.4062,
    #     -2.8750, -2.4062, -3.5469, -0.5469, -2.3281, -2.6094, -5.5312, -1.5312, -3.9844, -1.3047, -2.2031, -1.8672, -3.8281, -1.8750, -3.2031, -1.1875,
    #     -1.4297, -1.6484, -4.3438, -0.2578, -1.4297, -1.2266, -1.1953, -0.6523, -0.5000, -3.3438,  0.0000, -3.9531, -1.4375, -1.3281, -3.2656, -1.7734,
    #     -2.9531, -0.9336, -1.9922, -2.0781, -2.1875, -1.1250, -2.5000, -2.2344, -1.0078, -0.0547, -1.9922, -0.8828, -4.5312, -2.0469, -2.4062, -1.4531,
    #     -4.1250, -1.5781, -2.6406, -3.7188, -2.5156, -0.8906, -0.9062, -3.5625, -1.3516, -0.6484, -0.8984, -1.1953, -7.6250, -4.6875, -3.1875, -3.2031,
    #     -3.6719, -2.9062, -3.5469, -6.6250, -3.9219, -5.0312, -2.3906, -3.5000,  0.0000, -4.0938, -4.5312, -4.4375, -1.3594, -4.2500, -2.1406, -4.8438,
    #     -2.8594, -4.1875, -2.9219, -4.1250, -3.5000, -5.9375,  0.0000, -4.2188, -2.2188, -7.7500, -7.3438, -3.2500, -1.4062, -6.1250, -3.9375, -5.2188,
    #     -3.1250, -1.5781, -3.4375,  0.0000, -3.8125, -2.6562, -2.4688, -2.2812, -3.9219, -2.1406, -2.4688, -4.1250, -4.4688, -3.7812, -0.7500, -2.0156,
    #     -4.1875, -4.2500, -5.3438, -1.2500, -3.7969, -4.3438, -7.6250, -1.7500, -4.1875, -3.7656, -1.4922, -5.9375, -4.0625, -1.7891, -4.1250, -2.5469,
    #     -0.6250, -1.8438, -3.8750, -1.2344, -2.1250, -0.0312, -1.3281, -0.6484, -5.1562, -1.3672, -0.2109, -1.5391, -1.0859, -1.1562, -2.0312, -2.3750,
    #     -5.5000, -4.4062, -5.3438, -2.5469, -6.2500, -5.5938, -3.9688, -5.2188, -4.0625, -1.5469, -6.3438, -4.2812, -0.4375, -6.0000, -3.9375, -5.1562,
    #     -3.8750, -5.6250, -6.9688, -6.8750, -8.1250, -6.4062, -5.3125, -6.4375, -7.5000, -6.9688, -8.6875, -6.2500,  0.0000, -6.8438, -6.0625, -5.0000,
    #     -5.4062, -2.5625, -3.9375, -1.5078, -2.5156, -0.5781, -3.8906, -2.2188, -4.0938,  0.0000, -0.6250, -3.1094, -12.9375, -4.0312, -2.6250, -6.1875,
    #     -2.9531, -4.2188, -2.7656, -3.5156, -4.3125, -5.1250, -4.4688, -3.9219, -4.9688, -2.8750, -3.5312, -3.9219, -3.3906, -4.0312, -1.7500, -5.6875,
    #     -1.0469, -0.9609, -1.7422, -1.4453, -1.4688, -2.4062,  0.0000, -2.9375, -1.9453, -2.7500, -3.6562, -0.4219, -2.0625, -4.5938, -1.7578, -0.2031,
    #     -2.4531, -6.3125, -3.1562, -7.1562, -3.4062, -5.3125, -4.4062, -4.3125, -3.6562, -4.1562, -6.0938, -2.1875, -6.2812, -6.2188, -2.2031, -4.3438,
    #     -2.2969, -1.2656, -3.7031, -3.3281, -1.5234, -4.2500, -3.8125, -4.1875, -6.1562, -2.1562, -5.8125, -3.0625, -3.8438, -1.7188, -3.5938, -2.0781,
    #     -3.2031, -0.9375, -1.2266, -3.5938, -0.4375, -1.6875, -3.0156,  0.0000, -4.3438, -1.1094, -1.3828, -4.4062, -2.3438, -2.0000, -1.9141, -3.2188,
    #     -2.9062, -1.6250, -2.1719, -1.6172, -1.7031, -1.0000, -2.8594, -0.0859, -4.1250, -1.2344, -1.5547, -3.6875, -1.7422, -0.2031, -0.6172, -1.8438,
    #     0.0000, -1.1875, -0.8047, -0.2578, -2.0625, -2.9844, -0.1953, -2.6094, -2.3906, -1.8672, -4.0000, -2.8438, -3.3438, -1.2500, -0.5234, -1.3828,
    #     -2.0000, -2.4844, -0.9844, -1.4062, -3.4219, -2.6562,  0.0000, -3.2812, -2.8594, -1.9297, -2.8906, -3.8750, -2.1250, -4.1250, -1.7422, -4.8750,
    #     -5.3438, -2.2344, -4.7812, -3.1406, -3.4062, -2.3281, -1.9375, -3.0000, -4.8125, -3.6406, -0.5312, -5.7188, -4.3125, -3.3281, -5.4375, -2.4375,
    #     -1.9062, -2.5156, -3.8594, -2.1250, -2.9844, -2.7969, -5.5000, -3.2031, -2.7812, -5.8750, -4.6562, -1.7734, -2.8594, -3.2656, -2.3281, -1.2812,
    #     -5.2812, -2.7969, -3.3750, -2.8125, -2.4219, -1.7188, -1.3516, -2.6406, -3.8594, -4.0312, -1.3125, -4.6250, -4.1250, -4.2812, -3.1875, -2.0469,
    #     -4.0000, -3.6406, -2.6250, -0.3906, -6.0312, -4.6875, -4.8750, -2.5781, -5.6875, -1.7734,  0.0000, -5.0625, -4.9688, -3.2969, -4.1875, -7.6562,
    #     -4.9688, -1.1875, -0.3047, -0.1406, -4.0938, -0.8984, -2.6562, -3.2031, -0.0703, -1.2109, -2.8281,  0.0000, -2.8594, -3.2344, -3.6406, -2.1562,
    #     -5.8125, -5.0625, -3.0625, -2.2344, -5.4375, -5.3125, -3.3750, -3.3281, -6.2500, -4.9062, -3.4375, -6.3125, -4.6875,  0.0000, -4.1250, -7.5312,
    #     -6.0312, -7.4375, -6.5625, -4.1250, -7.6875, -5.5625, -7.1875, -6.6875, -5.0000, -6.9062, -6.3750, -5.2500, -9.6250, -3.4375, -7.3125, -7.1562,
    #     -4.1562, -1.4062, -1.1016, -1.8750, -1.7969, -2.5625, -1.3828, -3.5000, -3.6406, -1.9141, -2.1094, -2.9688, -1.0703, -3.3750, -3.7500, -2.9531,
    #     0.0000, -3.3125, -3.4844, -5.8750, -3.5000, -5.6562, -1.0781, -5.1250, -6.0312, -4.1875, -7.9375, -3.5469, -2.1875, -3.8281, -2.8281, -3.8281,
    #     -3.3281, -2.8750, -4.4062, -1.4062, -3.1094, -5.2188, -4.6562, -5.1875, -5.1562, 0.0000, -1.7109, -2.8594, -3.9844, -4.4688, -5.0938, -2.5938,
    #     -6.2812, -7.5000, -3.3125, 0.0000, -7.5000, -7.2500, -4.1875, -4.5000, -7.5625, -4.5000, -6.9062, -5.4062, -2.5781, -5.6250, -5.7188, -2.9688,
    #     -8.1875, -6.6562, -10.1250, -8.1250, -6.0938, -3.5781, -7.8750, -7.3438, -6.5625, -2.8438, 0.0000, -6.5312, -15.2500, -10.6250, -8.4375, -9.3125,
    #     -6.6250, -7.0625, -6.0938, -6.1562, -4.1875, -5.3438, -4.1875, -4.0625, -5.8125, -6.8438, -5.5938, -6.8438, 0.0000, -5.1250, -2.9531, -5.9375,
    #     -3.6250, -3.2344, -3.6406, -5.0938, -4.7188, -4.1250, -6.0938, -4.6562, -4.5625, -3.7812, -4.2188, -5.3125, 0.0000, -5.0938, -4.4375, -7.5000,
    #     -3.3281, -3.7656, -1.5938, -2.5469, -1.8438, -3.2656, -1.5781, -3.6094, -0.8828, -1.6641, -1.9375, -1.8281, -3.4375, -1.7891, -1.8438, -3.5625,
    #     -3.9062, -3.5156, -4.0625, -4.8750, -1.3672, -2.3438, -3.2500, -2.9375, -0.8281, -4.5625, 0.0000, -3.4688, -6.8125, -3.4688, -5.5000, -2.2500,
    #     -1.6250, -3.0000, -2.5938, -2.2656, -2.4375, -1.2031, -2.3125, -2.0156, -1.0469, -0.9688, -0.7969, -2.5156, -6.0938, -2.1562, -2.0156, -2.3125,
    #     -1.8516, -1.2578, -4.4688, -1.5391, -1.1172, -1.3359, -5.3438, -3.3750, -6.6562, -1.0938, 0.0000, -4.7500, -5.0312, -2.4219, -3.5781, -3.2344,
    #     -5.6875, -2.9219, -2.0156, -3.8281, -4.0938, -4.9688, -4.4062, -3.5625, -3.6875, -4.2188, -4.8750, -3.4688, 0.0000, -2.2500, -3.0625, -4.9688,
    #     -10.3125, -8.5625, -8.2500, -9.5625, -11.3125, -9.2500, -8.8125, -11.0625, -9.3750, -11.5000, -11.7500, -11.3750, 0.0000, -9.1250, -9.0625, -12.5625,
    #     -8.4375, -2.9219, -7.4688, -1.4375, -8.6875, -9.2500, -6.4375, -8.5000, -11.3125, -4.3750, -8.1875, -9.4375, 0.0000, -8.5000, -8.4375, -5.8438,
    #     -2.4688, -3.0781, 0.0000, -3.5312, -2.8281, -0.9531, -2.7969, -1.7031, -2.3125, -1.2500, -2.9531, -3.0469, -5.9375, -3.3281, -3.3125, -3.9844,
    #     -2.0781, -1.9766, -0.1328, -4.4688, -1.6797, -1.6016, -1.1719, -2.9688, -1.1953, -2.5781, -3.2500, -1.3672, -2.2031, -1.1562, -1.8516, -2.2188,
    #     -7.5312, -6.5938, -4.2500, -2.2812, -3.9219, -4.6250, -4.5312, -3.2969, -2.2344, -3.7188, -4.7500, -5.1562, -5.7500, -4.6562, -0.6719, -1.8906,
    #     -2.3594, -4.1562, -4.5000, -4.0625, -1.1328, -4.9688, -4.6562, -2.5469, -3.1406, -2.3125, -3.0781, -5.3125, -3.5469, -2.0312, -3.5156, -1.1016,
    #     -3.5156, -5.7500, -2.8906, -4.6250, -4.5625, -3.7812, -2.3125, -4.1562, -6.4375, -3.1250, -5.2500, -2.8594, -4.4375, -3.6094, -4.5938, -3.7656,
    #     -4.7500, -6.0000, -7.8750, -6.2188, -2.5312, -3.0469, -5.2188, -3.6719, -5.9062, -4.5938, -4.7188, -5.1250, -4.7812, -4.4062, -3.3750, -6.4062,
    #     -11.7500, -6.4375, -3.2656, -7.7500, -7.7812, -7.5000, -7.6250, -9.5625, -6.5000, -7.0000, -6.7812, -8.8750, -7.8438, -7.8438, -7.0000, -8.4375,
    #     -6.1250, -4.6562, -6.2500, -4.0938, -6.4688, -6.8125, -5.4375, -6.7500, -5.1875, -4.8750, -3.9844, -5.0000, -3.1562, -7.0312, -6.5000, -6.7500,
    #     -4.5312, -3.8125, -5.1875, -3.1719, -4.8750, -5.0625, -6.0625, -6.1875, -4.3750, -3.8750, -5.4062, -5.3438, -5.3438, -3.6406, -5.0000, -4.7188,
    #     -3.9219, -3.5312, -1.7422, -4.0625, -2.7188, -1.8281, -2.5625, -4.1875, 0.0000, -2.2188, -0.8516, -1.1484, -2.4375, -3.2031, -3.3438, -1.3828,
    #     -5.0312, -3.1250, -3.8594, -5.8438, -3.3438, -3.7031, -3.9062, -4.0312, -3.1562, -2.1562, -2.7031, -3.8906, -2.0625, -5.1562, -2.1719, -2.8281,
    #     -2.3125, -2.5156, -0.3828, -2.4375, -2.5156, -2.5625, -3.1094, -3.4062, 0.0000, -1.4844, -0.8438, -1.8906, -5.6250, -1.5156, -3.5156, -2.0156,
    #     -1.0703, -3.2969, -1.3516, -2.1562, -3.4688, -2.6875, -2.9375, -2.3125, -4.7188, -0.1406, -1.1328, -2.9375, -4.4688, -4.3125, -4.0625, -1.7109,
    #     -0.7031, -3.4688, -5.0000, -1.7812, -4.9062, -5.5312, -1.6562, -3.5000, -4.9062, -2.0469, -4.3125, -4.2188, -3.4531, -7.0625, -5.0938, -1.1250,
    #     -10.5000, -11.0000, -11.2500, -11.7500, -10.0625, -9.5000, -11.4375, -10.5000, -8.0625, -9.3125, -10.8125, -11.5000, -9.3125, -9.9375, -9.8125, -8.3125,
    #     -6.6875, -7.2188, -5.9062, -3.6406, -7.4062, -2.9688, -4.2188, -5.0312, -11.3125, -4.4375, -4.7188, -10.3125, -7.1250, -8.1875, -5.5000, -8.4375,
    #     -0.6250, -1.3750, -3.5625, -0.4844, -2.4688, -2.1250, -2.7344, -4.1250, -3.2344, -3.6719, -5.3750, -3.2969, -4.5312, -4.7812, -0.0938, -5.0938,
    #     -0.4453, -1.9375, -2.1719, -1.0156, -3.6562, -2.9688, 0.0000, -1.1094, -0.9258, -1.5938, -1.7891, -0.6562, -1.2031, -1.9531, -2.0000, -1.3125,
    #     -3.5312, -6.0938, -4.0000, -4.1562, -6.7188, -8.5625, 0.0000, -4.0625, -6.8750, -5.9062, -3.2031, -5.3125, -5.0312, -4.2812, -3.9531, -4.4062,
    #     -3.0625, -3.1875, -3.1250, -4.2500, -2.6719, -3.7969, -2.0156, -2.4375, -5.0312, -2.6562, 0.0000, -3.1250, -1.4844, -1.9766, -3.7812, -4.8125
    #     ], dtype=torch.bfloat16)

    generate_golden = get_golden_generator(UnarySFPUGolden)
    golden_tensor = generate_golden(
        mathop, src_A, formats.output_format, dest_acc, formats.input_format
    )

    unpack_to_dest = (
        formats.input_format.is_32_bit()
        and dest_acc
        == DestAccumulation.Yes  # If dest_acc is off, we unpack Float32 into 16-bit format in src registers (later copied over in dest reg for SFPU op)
    )
    test_config = {
        "formats": formats,
        "testname": test_name,
        "dest_acc": dest_acc,
        "input_A_dimensions": input_dimensions,
        "input_B_dimensions": input_dimensions,
        "mathop": mathop,
        "approx_mode": approx_mode,
        "unpack_to_dest": unpack_to_dest,
        "tile_cnt": tile_cnt,
    }

    res_address = write_stimuli_to_l1(
        test_config,
        src_A,
        src_B,
        formats.input_format,
        formats.input_format,
        tile_count_A=tile_cnt,
        tile_count_B=tile_cnt,
    )

    run_test(test_config)

    res_from_L1 = collect_results(formats, tile_count=tile_cnt, address=res_address)

    # res_from_L1 = res_from_L1[:1024]
    assert len(res_from_L1) == len(golden_tensor)

    torch_format = format_dict[formats.output_format]
    res_tensor = torch.tensor(res_from_L1, dtype=torch_format)

    print("\n\nUsing ", len(golden_tensor), " numbers in total. \n\n")

    def format_tensor(t):
        return "[" + ", ".join(f"{float(v):.4f}" for v in t) + "]"

    # print("RES_TENSOR first 10:")
    # print(format_tensor(res_tensor[0:10]))
    # print("GOLDEN first 10:")
    # print(format_tensor(golden_tensor[0:10]))

    # print("=" * 80)

    # print("RES_TENSOR last 10:")
    # print(format_tensor(res_tensor[-10:]))
    # print("GOLDEN last 10:")
    # print(format_tensor(golden_tensor[-10:]))

    torch.set_printoptions(
        linewidth=5000, sci_mode=False, threshold=1000000000, precision=3
    )

    print(res_tensor.view(32, 32))
    print("-" * 300)
    print(golden_tensor.view(32, 32))

    assert passed_test(
        golden_tensor,
        res_tensor,
        formats.output_format,
        custom_atol=0.1,
        custom_rtol=0.1,
        one_face_check=False,
    )
